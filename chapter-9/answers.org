* Chapter 9: This Thing [] and Some More Stuff
** Exercise: EnumFromTo

   #+BEGIN_SRC haskell
     import Data.Char


     eftBool :: Bool -> Bool -> [Bool]
     eftBool False False = [False]
     eftBool False True = [False True]
     eftBool True False = []
     eftBool True True = [True]

     eftOrd :: Ordering -> Ordering -> [Ordering]
     eftOrd LT LT = [LT]
     eftOrd LT EQ = [LT EQ]
     eftOrd LT GT = [LT EQ GT]
     eftOrd EQ LT = []
     eftOrd EQ EQ = [EQ]
     eftOrd EQ GT = [EQ GT]
     eftOrd GT LT = []
     eftOrd GT EQ = []
     eftOrd GT GT = [GT]

     eftInt :: Int -> Int -> [Int]
     eftInt from to =
       | from > to = []
       | from == to = [from]
       | otherwise = from : eftInt (from + 1) to

     eftChar :: Char -> Char -> [Char]
     eftChar from to = map chr $ eftInt (ord from) (ord to)
   #+END_SRC

** Exercise: The Fearful Symmetry

   1.
      #+INCLUDE: "./myWords.hs" src haskell
   2.
      #+INCLUDE "./poemLines.hs" src haskell
   3.
      #+INCLUDE "./split.hs" src haskell

** Exercise: Comprehend Thy Lists

   #+BEGIN_SRC haskell
   mySqr = [x^2 | x <- [1..10]
   #+END_SRC

   1. ~[x | x <- mySqr, rem x 2 == 0]~ yields ~[4, 16, 36, 64, 100]~
   2. ~[(x, y) | x <- mySqr, y <- mySqr, x < 50, y > 50]~ yields
      ~[(1, 64), (1, 81), (1, 100), ..., (49, 81), (49, 100)]~
   3. ~take 5 [(x, y) | x <- mySqr, y <- mySqr, x < 50, y > 50]~ yields
      ~[(1, 64), (1, 81), (1, 100), (4, 64), (4, 81)]~

** Exercise: Square Cube

   #+BEGIN_SRC haskell
   mySqr = [x^2 | x <- [1..5]]
   myCube = [x^3 | x <- [1..5]]
   #+END_SRC

   1. ~[(x, y) | x <- mySqr, y <- myCube]~
   2. ~[(x, y) | x <- mySqr, y <- myCube, x < 50, y < 50]~
   3. ~length [(x, y) | x <- mySqr, y <- myCube, x < 50, y < 50]~

** Exercise: Bottom Madness

   1. ~[x^y | x <- [1..5], y <- [2, undefined]]~, blows up as undefined is evaluated.
   2. ~take 1 $ [x^y | x <- [1..5], y <- [2, undefined]]~ doesn't blow up as the
      list comprehension is lazy evaluated and we only take a single item thus
      it never evaluates the second item.
   3. ~sum [1, undefined, 3]~ blow up as undefined is evaluated
   4. ~length [1, 2, undefined]~ does not blow up as length is strict in the
      spine, but not in values.
   5. ~length $ [1, 2, 3] ++ undefined~ will blow up as undefined will be
      evaluated when length tries to evaluate the expression forming its
      argument which will try to concatenate ~[1,2,3]~ with ~undefined~ which
      will fail as undefined is not a list.
   6. ~take 1 $ filter even [1, 2, 3, undefined]~ doesn't blow up because the
      first even number is before undefined in the list so it is never evaluated
   7. ~take 1 $ filter even [1, 3, undefined]~ will blow up as the values of the
      list will be evaluated to be checked against the ~even~ proposition.
   8. ~take 1 $ filter odd [1, 3, undefined]~ won't blow up as the first odd
      number is before undefined
   9. ~take 2 $ filter odd [1, 3, undefined]~ won't blow up as the second odd
      number is before undefined
   10. ~take 3 $ filter odd [1, 3, undefined]~ will blow up as there is no third
       odd number so undefined will be evaluated when checking ~odd undefined~

** Intermission: Is it in normal form?

   1. ~[1, 2, 3, 4, 5]~ normal form
   2. ~1: 2: 3: 4: _~ is in weak head normal form as the root of the expression
      is a data constructor, it is not normal form as not all arguments are
      evaluated.
   3. ~enumFromTo 1 10~ is neither weak head normal form or normal form as it is
      a function application
   4. ~length [1, 2, 3, 4, 5]~ is neither weak head normal form or normal form
      as it is a function application
   5. ~sum (enumFromTo 1 10)~ is neither weak head normal form or normal form
      as it is a function application
   6. ~['a'..'m'] ++ ['n'..'z']~ is neither weak head normal form or normal form
      as it is a function application ~(++)~
   7. ~(_, 'b')~ is in weak head normal form as the root of the expression is a
      data constructor, but not normal form since one of the arguments is not
      evaluated.

** Exercise: More Bottoms

   1. ~take 1 $ map (+1) [undefined, 2, 3]~ returns bottom as ~(+1) undefined~
      will be evaluated
   2. ~take 1 $ map (+1) [1, undefined, 3]~ returns ~2~
   3. ~take 2 $ map (+1) [1, undefined, 3]~ returns bottom since ~(+1)
      undefined~ will be evaluated
   4. The function returns a list of the same length of the input with booleans
      denoting whether the corresponding character of the input was a vowel or not.
   5.
      1. ~map (^2) [1..10]~ yields ~[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]~
      2. ~map minimum [[1..10], [10..20], [20..30]]~ yields ~[1, 10, 20]~
      3. ~map sum [[1..5], [1..5], [1..5]]~ yields ~[15, 15, 15]~
   6.
      #+BEGIN_SRC haskell
      Prelude> import Data.Bool

      Prelude> map (\x -> bool x (-x) (x == 3))  [1..10]
      #+END_SRC

** Exercise: Filtering

   1. ~filter (\x -> rem x 3 == 0) [1..30]~
   2. ~(length . filter (\x -> rem x 3 == 0)) [1..30]~
   3. ~filter (\x -> not $ x `elem` ["a", "the"]) $ words "the brown dog was a good"~

** Exercise: Zipping

   1.
        #+BEGIN_SRC haskell
        myZip :: [a] -> [b] -> [(a, b)]
        myZip [] _ = []
        myZip _ [] = []
        myZip x:xs y:ys = (x,y) : myZip xs ys
        #+END_SRC
   2.
       #+BEGIN_SRC haskell
       myZipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
       myZipWith _ [] _ = []
       myZipWith _ _ [] = []
       myZipWith f x:xs y:ys = f x y : myZipWith f xs ys
       #+END_SRC
   3.
      #+BEGIN_SRC haskell
      zip = zipWith (\a b -> (a, b))
      #+END_SRC

** Chapter Exercises

*** Data.Char
    1. ~isUpper :: Char -> Bool~, ~toUpper :: Char -> Char~
    2. ~filter isUpper~
    3. ~capitilize w:ws = toUpper w : ws~
    4. ~capitilize w:ws = toUpper w: capitilize ws~
    5. ~firstLetter ws = toUpper . head $ ws~
    6. Already wrote it as a compose function

*** Ciphers

    #+INCLUDE ./cipher.hs src haskell

*** Writing your own standard functions

    1.
             #+BEGIN_SRC haskell
             myOr :: [Bool] -> Bool
             myOr [] = True
             myOr (x:xs) = x || myOr xs
             #+END_SRC
    2.
             #+BEGIN_SRC haskell
             myAny :: (a -> Bool) -> [a] -> Bool
             myAny _ [] = False
             myAny f (x:xs)
               | f x = True
               | otherwise = myAny f xs
             #+END_SRC
    3.
            #+BEGIN_SRC haskell
            x `myElem` [] = False
            x `myElem` (y:ys)
               | x == y = True
               | otherwise = x `myElem` ys

            x `myElemAny` ys = any (== x) ys
            #+END_SRC
    4.
           #+BEGIN_SRC haskell
           myReverse :: [a] -> [a]
           myReverse xs = go xs []
              where go [] rs = rs
                    go (x:xs) rs = go xs (x : rs)
           #+END_SRC
    5.
          #+BEGIN_SRC haskell
          squish :: [[a]] -> [a]
          squish [] = []
          squish ([]:xss) = squish xss
          squish ((x:xs):xss) = x : (squish $ xs:xss)
          #+END_SRC
    6.
         #+BEGIN_SRC haskell
         squishMap :: (a -> [b]) -> [a] -> [b]
         squishMap f = squish . map f
         #+END_SRC
    7.
         #+BEGIN_SRC haskell
         squishAgain :: [[a]] -> [a]
         squishAgain xs = squishMap (\x -> [x]) xs
         #+END_SRC
    8.
        #+BEGIN_SRC haskell
        myMaximumBy :: (a -> a -> Ordering) -> [a] -> a
        myMaximumBy cmp [] = error "Empty list"
        myMaximumBy cmp (x:xs) = go cmp x xs
            where go cmp x [] = x
                  go cmp x1 (x2:xs) = go cmp (max cmp x1 x2) xs
                  max cmp x1 x2 = case cmp x1 x2 of
                    LT -> x2
                    EQ -> x1
                    GT -> x1
        #+END_SRC
    9.
        #+BEGIN_SRC haskell
        myMinimumBy :: (a -> a -> Ordering) -> [a] -> a
        myMinimumBy cmp [] = error "Empty list"
        myMinimumBy cmp (x:xs) = go cmp x xs
            where go cmp x [] = x
                  go cmp x1 (x2:xs) = go cmp (min cmp x1 x2) xs
                  min cmp x1 x2 = case cmp x1 x2 of
                    LT -> x1
                    EQ -> x1
                    GT -> x2
        #+END_SRC
    10.
        #+BEGIN_SRC
        myMaximum :: (Ord a) => [a] -> a
        myMaximum = myMaximumBy compare

        myMinimum :: (Ord a) => [a] -> a
        myMinimum = myMinimumBy compare
        #+END_SRC
